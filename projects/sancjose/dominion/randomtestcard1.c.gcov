        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:#define TESTCARD "smithy"
        -:   10:
function main called 4 returned 75% blocks executed 69%
        -:   11:int main(int argc, char const *argv[])
        -:   12:{
        -:   13:
        4:   14:    srand(time(NULL));
        -:   15:
        4:   16:    int newCards = 0;
        4:   17:    int discarded = 1;
        4:   18:    int xtraCoins = 0;
        4:   19:    int shuffledCards = 0;
        -:   20:
        -:   21:    int n, p, i;
        -:   22:    
        4:   23:    int handpos = 0, bonus = 0;
        4:   24:    int seed = floor(Random() * 1000) + 1000;
        4:   25:    int numPlayers = 2;
        4:   26:    int thisPlayer = 0;
        -:   27:    struct gameState G, testG;
        4:   28:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:                 sea_hag, outpost, smithy, gardens};
        -:   30:
        -:   31:    // initialize a game state and player cards
        -:   32:
        4:   33:    printf(" random card tests for: %s\n", TESTCARD);
        -:   34:
        4:   35:    SelectStream(2);
        4:   36:    PutSeed(3);
        -:   37:
     8004:   38:    for (n = 0; n < 2000; n++)
        4:   38-block  0
     8004:   38-block  1
branch  0 taken 99%
branch  1 taken 1%
     8000:   38-block  2
        -:   39:    {
210408000:   40:        for (i = 0; i < sizeof(struct gameState); i++)
     8000:   40-block  0
210408000:   40-block  1
branch  0 taken 99%
branch  1 taken 1%
210400000:   40-block  2
        -:   41:        {
210400000:   42:            ((char *)&G)[i] = floor(Random() * 256);
210400000:   43:        }
210400000:   43-block  0
     8000:   44:        thisPlayer = floor(Random() * 2);
        -:   45:
     8000:   46:        testG.handCount[thisPlayer] = (int)floor(Random() * MAX_HAND);
     8000:   47:        testG.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
     8000:   48:        testG.coins = floor(Random() * 7);
        -:   49:
     8000:   50:        G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
     8000:   51:        G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
     8000:   52:        G.coins = floor(Random() * 7);
        -:   53:
     8000:   54:        initializeGame(numPlayers, k, seed, &G);
        -:   55:
        -:   56:        // copy the game state to a test case
     8000:   57:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   58:
     8000:   59:        cardEffect(smithy, 0, 0, 0, &testG, handpos, &bonus);
        -:   60:
     8000:   61:        newCards = 3;
        -:   62:
     8000:   63:        printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
     8000:   64:        printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
     8000:   65:        printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
     8000:   66:        assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
     8000:   66-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:   66-block  1
    $$$$$:   66-block  2
     8000:   66-block  3
     8000:   67:        assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
     8000:   67-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:   67-block  1
    $$$$$:   67-block  2
     8000:   67-block  3
     8000:   68:        assert(testG.coins == G.coins + xtraCoins);
     8000:   68-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:   68-block  1
    $$$$$:   68-block  2
     8000:   68-block  3
        -:   69:
     8000:   70:        printf("\n >>>>> SUCCESS: Testing complete for %s card <<<<<\n\n", TESTCARD);
     8000:   71:    }
     8000:   71-block  0
        -:   72:
        4:   73:      exit(0);
        4:   73-block  0
        -:   74:
        -:   75:    return 0;
        3:   76:}
        3:   76-block  0
