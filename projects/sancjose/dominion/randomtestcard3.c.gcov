        -:    0:Source:randomtestcard3.c
        -:    0:Graph:randomtestcard3.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:#define TESTCARD "adventurer"
        -:   11:
function main called 0 returned 0% blocks executed 0%
        -:   12:int main(int argc, char const *argv[])
        -:   13:{
    #####:   14:    srand(time(NULL));
        -:   15:
    #####:   16:    int newCards = 0;
    #####:   17:    int discarded = 1;
    #####:   18:    int xtraCoins = 0;
    #####:   19:    int shuffledCards = 0;
        -:   20:
        -:   21:    int j, m;
    #####:   22:    int handpos = 0, bonus = 0;
    #####:   23:    int seed = (rand() % 1000) + 1000;
    #####:   24:    int numPlayers = 2;
    #####:   25:    int thisPlayer = 0;
        -:   26:    int n, i, p;
        -:   27:
        -:   28:    struct gameState G, testG;
        -:   29:
    #####:   30:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   31:                 sea_hag, outpost, smithy, gardens};
        -:   32:
        -:   33:
        -:   34:
    #####:   35:    SelectStream(2);
    #####:   36:    PutSeed(3);
        -:   37:
    #####:   38:    printf("random test for card 1: %s\n", TESTCARD);
        -:   39:
    #####:   40:    for (n = 0; n < 2000; n++)
    $$$$$:   40-block  0
    $$$$$:   40-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   40-block  2
        -:   41:    {
    #####:   42:        for (i = 0; i < sizeof(struct gameState); i++)
    $$$$$:   42-block  0
    $$$$$:   42-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   42-block  2
        -:   43:        {
    #####:   44:            ((char *)&G)[i] = floor(Random() * 256);
    #####:   45:        }
    $$$$$:   45-block  0
        -:   46:
    #####:   47:        thisPlayer = floor(Random() * 2);
    #####:   48:        G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
    #####:   49:        G.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
    #####:   50:        G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
    #####:   51:        G.coins = floor(Random() * 7);
        -:   52:
    #####:   53:        testG.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
    #####:   54:        testG.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
    #####:   55:        testG.handCount[thisPlayer] = floor(Random() * MAX_HAND);
    #####:   56:        testG.coins = floor(Random() * 7);
        -:   57:
    #####:   58:        initializeGame(numPlayers, k, seed, &G);
    #####:   59:        memcpy(&testG, &G, sizeof(struct gameState));
    #####:   60:        cardEffect(adventurer, 0, 0, 0, &testG, handpos, &bonus);
        -:   61:
    #####:   62:        newCards = 2;
    #####:   63:        xtraCoins = 0;
        -:   64:
    #####:   65:        printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
    #####:   66:        printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
    #####:   67:        printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   68:
    #####:   69:        assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
    $$$$$:   69-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   69-block  1
    $$$$$:   69-block  2
    $$$$$:   69-block  3
    #####:   70:        assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
    $$$$$:   70-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   70-block  1
    $$$$$:   70-block  2
    $$$$$:   70-block  3
    #####:   71:        assert(testG.coins == G.coins + xtraCoins);
    $$$$$:   71-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   71-block  1
    $$$$$:   71-block  2
    $$$$$:   71-block  3
        -:   72:
    #####:   73:        printf("\n >>>>> SUCCESS: Testing complete for %s card <<<<<\n\n", TESTCARD);
    #####:   74:    }
    $$$$$:   74-block  0
        -:   75:
    #####:   76:    exit(0);
    $$$$$:   76-block  0
        -:   77:
        -:   78:    return 0;
    #####:   79:}
    $$$$$:   79-block  0
