        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:#define TESTCARD "gardens"
        -:   10:
function main called 2 returned 0% blocks executed 73%
        -:   11:int main(int argc, char const *argv[])
        -:   12:{
        -:   13:
        2:   14:    srand(time(NULL));
        -:   15:
        2:   16:    int newCards = 0;
        2:   17:    int discarded = 1;
        2:   18:    int xtraCoins = 0;
        2:   19:    int shuffledCards = 0;
        -:   20:
        -:   21:    int n, p, i;
        -:   22:
        2:   23:    int handpos = 0, bonus = 0;
        2:   24:    int seed = floor(Random() * 1000) + 1000;
        2:   25:    int numPlayers = 2;
        2:   26:    int thisPlayer = 0;
        -:   27:    struct gameState G, testG;
        2:   28:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:                 sea_hag, outpost, smithy, gardens};
        -:   30:
        -:   31:    // initialize a game state and player cards
        -:   32:
        2:   33:    printf(" random card tests for: %s\n", TESTCARD);
        -:   34:
        2:   35:    SelectStream(2);
        2:   36:    PutSeed(3);
        -:   37:
     4002:   38:    for (n = 0; n < 2000; n++)
        2:   38-block  0
     4002:   38-block  1
branch  0 taken 99%
branch  1 taken 1%
     4000:   38-block  2
        -:   39:    {
105204000:   40:        for (i = 0; i < sizeof(struct gameState); i++)
     4000:   40-block  0
105204000:   40-block  1
branch  0 taken 99%
branch  1 taken 1%
105200000:   40-block  2
        -:   41:        {
105200000:   42:            ((char *)&G)[i] = floor(Random() * 256);
105200000:   43:        }
105200000:   43-block  0
     4000:   44:        thisPlayer = floor(Random() * 2);
        -:   45:
     4000:   46:        testG.supplyCount[thisPlayer] = (int)floor(Random() * MAX_HAND);
        -:   47:
     4000:   48:        G.supplyCount[thisPlayer] = floor(Random() * MAX_HAND);
        -:   49:
     4000:   50:        initializeGame(numPlayers, k, seed, &G);
        -:   51:
        -:   52:        // copy the game state to a test case
     4000:   53:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   54:
     4000:   55:        cardEffect(gardens, 0, 0, 0, &testG, handpos, &bonus);
        -:   56:
     4000:   57:        printf("supply count =%d, expected =%d\n", testG.supplyCount[thisPlayer], G.supplyCount[thisPlayer] < 0);
     4000:   58:        assert(testG.supplyCount[thisPlayer] == G.supplyCount[thisPlayer]);
     4000:   58-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:   58-block  1
    $$$$$:   58-block  2
     4000:   58-block  3
        -:   59:
     4000:   60:        printf("\n >>>>> SUCCESS: Testing complete for %s card <<<<<\n\n", TESTCARD);
     4000:   61:    }
     4000:   61-block  0
        -:   62:
        2:   63:    exit(0);
        2:   63-block  0
        -:   64:
        -:   65:    return 0;
    #####:   66:}
    $$$$$:   66-block  0
