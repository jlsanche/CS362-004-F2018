        -:    0:Source:councilRoomUnitTest.c
        -:    0:Graph:councilRoomUnitTest.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:#define TESTCARD "council_room"
        -:   11:
        -:   12://source cited: using template from cardtest4.c on canvas
        -:   13:
function main called 0 returned 0% blocks executed 0%
        -:   14:int main(int argc, char const *argv[])
        -:   15:{
        -:   16:
    #####:   17:    int newCards = 0;
    #####:   18:    int discarded = 1;
    #####:   19:    int xtraCoins = 0;
    #####:   20:    int shuffledCards = 0;
    #####:   21:    int numBuys = 1;
        -:   22:
        -:   23:    int i, j, m;
    #####:   24:    int handpos = 0, bonus = 0;
    #####:   25:    int seed = 1000;
    #####:   26:    int numPlayers = 2;
    #####:   27:    int thisPlayer = 0;
        -:   28:	struct gameState G, testG;
    #####:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   30:			sea_hag, outpost, smithy, council_room};
        -:   31:
        -:   32:           
        -:   33:
        -:   34:	// initialize a game state and player cards
    #####:   35:	initializeGame(numPlayers, k, seed, &G);
        -:   36:
    #####:   37:    printf("card test 1: %s\n", TESTCARD);
        -:   38:
        -:   39:	// copy the game state to a test case
    #####:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   41:
    #####:   42:    printf("here\n");
        -:   43:
    #####:   44:	cardEffect(council_room, 0, 0, 0, &testG, handpos, &bonus);
        -:   45:
        -:   46:
    #####:   47:    newCards = 4;
        -:   48:
    #####:   49:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
    #####:   50:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
    #####:   51:	printf("buys = %d, expected = %d\n", testG.numBuys, G.numBuys + numBuys);
        -:   52:
    #####:   53:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
branch  0 never executed
branch  1 never executed
    #####:   54:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
branch  0 never executed
branch  1 never executed
    #####:   55:	assert(testG.numBuys == G.numBuys + numBuys);
branch  0 never executed
branch  1 never executed
        -:   56:    
        -:   57:
    #####:   58:    printf("\n >>>>> SUCCESS: Testing complete for %s card <<<<<\n\n", TESTCARD);
        -:   59:
    #####:   60:    return 0;
        -:   61:}
        -:   62:
